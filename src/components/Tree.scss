@import '~styles/variables';

.Tree {
  display: flex;
  margin: 0;
  padding: 0;
  list-style: none;
  
  // allows tree items to have full-width background color
  position: relative;

  // tree-item bg color (:before) should only be as wide as root <Tree>,
  // not recursive children
  & & {
    position: static;
  }
}

.TreeItem {
  width: 100%;
  min-width: 0;
  margin: 0;
  padding-left: map-get($sizes, 3);
  line-height: 1em;
  
  // pad recursive TreeItems
  & & {
    padding-left: map-get($sizes, 6);
  }

  // TreeItemExpander is not rendered for files:
  // add extra padding
  &.file .TreeItem-content {
    padding-left: 22px;
  }
}

.TreeItem-content {
  display: flex;
  align-items: center;
  padding: map-get($sizes, 2) 0;
  padding-right: map-get($sizes, 4);

  &:hover {
    > * {
      position: relative;
    }

    &:before {
      background-color: rgba($color-primary, 0.15);
    }
  }

  &:before {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    width: 100%;
    height: 1em;
    padding: map-get($sizes, 2) 0;
    background-color: transparent;
  }
}

// TreeItem bg color when selected
.TreeItem.selected > .TreeItem-content {
  > * {
    position: relative;
    color: white;
    font-weight: 500;
  }

  &:before {
    background-color: $color-primary;
  }
}

// Truncated TreeItem label (...)
.TreeItem-name {
  flex: 1;
  overflow: hidden;
  font-size: 13px;
  line-height: 1.2em;
  color: $gray-800;
  text-overflow: ellipsis;
  white-space: nowrap;
  user-select: none;
}

// Default Expander (on white)
.TreeItemExpander {
  opacity: 0.3;

  &:hover {
    opacity: 0.5;
  }
}

// White Expander (on selected)
// (nested child selectors to prevent further children from
// showing the wrong selected state)
.TreeItem.selected > .TreeItem-content > .TreeItemExpander {
  opacity: 0.6;

  &:hover {
    opacity: 1;
  }
}